Another Shell Command

head, tail : 파일의 앞/뒤 n행 출력

    head -n 3 vi-test.sh
    앞 3줄 출력
    * 명령어와 기능이 더 있는데 manual이나 구글링하면 나온다.

sort : 파일 안을 행 단위로 정렬

    car sotr_test.sh | sort -r
    -r : 내림차순
    -u : 중복 내용 제거
    -f : 대소문자 미구분
    * 더 많은 명령어와 기능은 구글링. 

uniq : '중복된 행이 연속으로 있는 경우' 중복 제거
    * 연속인 중복행에 대해서만 기능을 한다.
    * sorting을 하고 uniq로 중복제거하면 모든 중복이 제거되겠지? 하지만 위에서도 언급된 -u로 중복제거 가능

    -c : 같은 라인이 몇번 나오는지 표시
    -d  : 중복되어 나오는 라인 중 한 라인만 표시
    -D : 중복되는 모든 라인 표시
    -u : 중복이 없는 라인 표시

    * sort_test.sh | sort | uniq -dc >>> 정렬 후 중복되는 라인의 개수 표시
    * 이런식으로 다양한 커멘드가 있다. 구글링하면 나온다.

wc : 파이프라인으로 넘어온 내용의 줄, 단어 문자 수를 출력

    cat sort_test.sh | wc >>> 줄 수, 단어 수, 문자 수를 모두 출력
    cat sort_test.sh | wc -lwc >>> 줄 수, 단어 수, 문자 수를 모두 출력
    -l : 줄 수
    -w : 단어 수
    -c : 문자 수

grep : 파일의 내용에서 특정 문자열을 찾을 때 사용하는 명령어

    grep "찾는문자" [대상파일] >>> 파일을 출력해서 찾는문자에 색칠을 해준다.
    * grep의 활용 방법은 매우 다양하기 때문에 구글링을 해볼 필요가 있다.
    * 문장검색이라는 키워드로 이해하면 좋을 것 같다.

cut : 파일에서 특정 필드를 추출

    -f : 잘라낼 필드 지정
    -d : 필드를 구분하는 구분자. Default는 \t

    * 파일을 구분자로 필드를 나누고 원하는 필드를 출력하는 명령어다.
    * csv 파일로 예를 들면 ,로 필드를 구분짓고 2,3번 필드를 출력하도록 도와주는데
    * cut -d "," -f 2,3 [파일이름] 이런식으로 커멘드를 입력한다.
    * 구분자는 없어도 되는데 -f는 있어야한다.
    * 이정도가 기본적인 사용방법이고 추가적인 기능은 구글링하면 나온다.

stream : 해당 주제는 매우 광범위한데 Unix한정으로 커멘드를 실행하면 
         stdin : 입력
         stdout : 출력
         stderr : 에러
         3개의 stream이 생성된다는 내용인데 구글링이 필요하다.

Redirection : 프로그램의 출력(stdout)을 다른 파일이나 스트림으로 전달

    > : 덮어쓰기(Overwrite) 파일이 없으면 생성하고 저장
    >> : 맨 아래에 추가하기(Append)

Pipe : 프로그램의 출력(stdout)을 다른 프로그램의 입력으로 사용하고 싶은 경우

    A | B : A의 output을 B의 input으로 사용(커멘드를 다양하게 조합 할 수 있다.)
    ex) ls | grep "vi" : 현재 폴더에 있는 파일명 중 vi가 들어간 파일을 찾기

* redirection과 pipe를 잘 사용하는게 중요하겠다.

※ 여기서 부터가 서버에서 자주 사용하는 쉘 커맨드인데 네트워크에 대한 이해도가 낮아서 그런지 명확하게 이해는 안됨. 감만 잡고 넘어가야 할 듯

ps : 현재 실행되고 있는 프로세스 출력하기(Process Status)

    -e : 모든 프로세스
    -f : Full Format으로 자세히 보여줌
    * ps -ef 를 많이 사용함
    * 이외에도 여러가지 명령어가 있는데 그전에 출력물을 해석할 수 있어야 하는데 모르는게 많음
    * 해당 키워드로 더 공부를 해야 될 것 같다.

curl : 사용자 상호 작용 없이 작동하도록 설계된 서버에서 또는 서버로 데이터를 전송하기 위한 명령어
    * 

df : 현재 사용 중인 디스크 용량 확인(Disk Free)

    -h : 사람이 읽기 쉬운 형태로 출력
    * 서버에 문제가 있을 때 디스크가 가득차서 발생한 문제 일 수도 있는데 해당 명령어로 확인 가능

scp : SSH를 이용해 네트워크로 연결된 호스트 간 파일을 주고 받는 명령어

    remote -> local
    local -> remote
    remote -> remote
    * 이런 방향으로 파일을 주고 받을 수 있는데 자세한건 구글링을 해봐야 이해가 될 것 같다.

nphup : 터미널 종료 후에도 계속 작업이 유지하도록 실행(백그라운드 실행)

    ex) nohup python3 app.py &
    * 실행되고 있는 파일을 종료하는 방법은 ps -ef | grep app.py로 pid(process ID)를 찾은 후
    * kill -9 pid로 프로세스를 kill

chmod : 파일의 권한을 변경하는 경우 사용(Change Mode)

    * https://recipes4dev.tistory.com/175 자세한건 여기서
    * 이해는 했는데 커멘드를 입력해도 권한이 바뀌지 않음(w에 대해서만 간헐적으로 바뀜) 왜?
    * 모르겠는데 일단 pass

shell script : 쉘 커맨드의 조합

    * 쉘 커맨드를 조합해서 다양한 방식으로 프로그래밍을 할 수 있을 것 같음
    * 흥미롭고 공부하고 싶지만 일단 보류

special mission은 이런식으로 해결
cut -d " " -f 1,6 "KakaoTalkChats.txt" | grep "2019" | sort | uniq -c | sort -r | head -n 3